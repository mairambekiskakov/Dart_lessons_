// 1)Напишите функцию, которая возвращает заработанные очки за один бросок в игре в дартс.
// Дартс — это игра, в которой игроки бросают дротики в цель.
// В нашем конкретном примере игры цель награждает 4 различными суммами очков, в зависимости от того, куда приземляется дротик:
// Если дротик попадает за пределы цели, игрок не получает очков (0 очков).
// Если дротик попадает во внешний круг мишени, игрок получает 1 очко.
// Если дротик попадает в средний круг мишени, игрок получает 5 очков.
// Если дротик попадает во внутренний круг мишени, игрок получает 10 очков.
// Внешний круг имеет радиус 10 единиц (это эквивалентно общему радиусу всей цели), средний круг имеет радиус 5 единиц, а внутренний круг - радиус 1.
// Конечно, все они центрированы на одна и та же точка (то есть окружности концентричны, определяются координатами (0, 0).
// Напишите функцию, которая по заданной точке цели (определяемой ее декартовыми координатами x и y, где x и y действительны), возвращает правильную сумму, заработанную дротиком, приземлившимся в этой точке.
import 'dart:math';

int calculatePoints(double x, double y) {
  double distanceFromCenter = sqrt(x * x + y * y);

  if (distanceFromCenter > 10) {
    // дротик попал за пределы цели
    return 0;
  } else if (distanceFromCenter > 5) {
    // дротик попал во внешний круг
    return 1;
  } else if (distanceFromCenter > 1) {
    // дротик попал в средний круг
    return 5;
  } else {
    // дротик попал во внутренний круг
    return 10;
  }
}

// 2)Преобразование фразы в ее аббревиатуру.
// Технические специалисты любят свои TLA (трехбуквенные сокращения)!
// Помогите создать жаргон, написав программу, которая преобразует длинное имя,
// такое как Portable Network Graphics, в его аббревиатуру (PNG).
// Пунктуация обрабатывается следующим образом: дефисы — это разделители слов (например, пробелы);
// все остальные знаки препинания могут быть удалены из ввода.
// Например:
// As Soon As Possible - ASAP
// Liquid-crystal display - LCD
// Thank George It's Friday! - TGIF
String createAbbreviation(String phrase) {
  List<String> words =
      phrase.split(RegExp(r"[-\s]")); // разделение строки на слова
  String abbreviation = "";
  for (String word in words) {
    if (word.isNotEmpty) {
      abbreviation +=
          word[0].toUpperCase(); // добавление первой буквы каждого слова
    }
  }
  return abbreviation;
}

// 3)Определите, является ли треугольник равносторонним, равнобедренным или разносторонним.
// У равностороннего треугольника все три стороны имеют одинаковую длину.
// В равнобедренном треугольнике по крайней мере две стороны имеют одинаковую длину.
// (Иногда говорят, что две стороны имеют одинаковую длину, но для целей этого упражнения мы будем говорить по крайней мере две.)
// У разностороннего треугольника все стороны разной длины.
// Чтобы фигура вообще была треугольником, все стороны должны иметь длину > 0, а сумма длин любых двух сторон должна
// быть больше или равна длине третьей стороны.
String determineTriangleType(double side1, double side2, double side3) {
  if (side1 <= 0 || side2 <= 0 || side3 <= 0) {
    // проверка на то, что все стороны имеют длину > 0
    return "Некорректный треугольник";
  } else if (side1 + side2 <= side3 ||
      side1 + side3 <= side2 ||
      side2 + side3 <= side1) {
    // проверка на существование треугольника
    return "Некорректный треугольник";
  } else if (side1 == side2 && side2 == side3) {
    // все стороны равны
    return "Равносторонний треугольник";
  } else if (side1 == side2 || side1 == side3 || side2 == side3) {
    // хотя бы две стороны равны
    return "Равнобедренный треугольник";
  } else {
    // все стороны разные
    return "Разносторонний треугольник";
  }
}

// 4) Введите число,и определите, действительно ли оно по формуле Луна.
// Алгоритм Луна — это простая формула контрольной суммы, используемая для проверки различных идентификационных номеров,
// таких как номера кредитных карт и канадские номера социального страхования.
// Задача состоит в том, чтобы проверить, допустима ли заданная строка.
// Проверка числа
// Строки длиной 1 или меньше недействительны. Во вводе допускаются пробелы, но их следует убрать перед проверкой.
// Все остальные нецифровые символы запрещены.

// Пример 1: действующий номер кредитной карты
// 4539 3195 0343 6467
// Первый шаг алгоритма Луна состоит в том, чтобы удвоить каждую вторую цифру, начиная справа. мы будем удваивать
// 4_3_ 3_9_ 0_4_ 6_6_
// Если при удвоении числа получается число больше 9, вычтите 9 из произведения. Результаты нашего удвоения:
// 8569 6195 0383 3437
// Затем просуммируйте все цифры:
// 8+5+6+9+6+1+9+5+0+3+8+3+3+4+3+7 = 80
// Если сумма делится на 10 без остатка, то число правильное. Этот номер действителен!
// Пример 2: неверный номер кредитной карты
// 8273 1232 7352 0569
// Удвойте вторые цифры, начиная справа
// 7253 2262 5312 0539
// Суммируйте цифры
// 7+2+5+3+2+2+6+2+5+3+1+2+0+5+3+9 = 57
// 57 не делится на 10 без остатка, поэтому это число неверно.
bool isLuhnValid(String number) {
  // Удаление пробелов из строки
  number = number.replaceAll(' ', '');

  // Проверка, что в строке только цифры
  if (!RegExp(r'^\d+$').hasMatch(number)) {
    return false;
  }

  // Преобразование строки в список чисел
  List<int> digits = number.split('').map(int.parse).toList();

  // Удвоение каждой второй цифры, начиная справа
  for (int i = digits.length - 2; i >= 0; i -= 2) {
    digits[i] *= 2;
    if (digits[i] > 9) {
      digits[i] -= 9;
    }
  }

  // Суммирование всех цифр
  int sum = digits.reduce((value, element) => value + element);

  // Проверка, что сумма делится на 10 без остатка
  return sum % 10 == 0;
}
